{"version":3,"sources":["Header.js","ListView.js","Card.js","App.js","serviceWorker.js","index.js"],"names":["Header","_this","this","react_default","a","createElement","className","onClick","props","toggleListView","Component","ListView","displayListView","isListViewOpen","style","display","cards","map","card","index","key","fetchCardData","cardName","Card","imgUrl","query","selectedCard","length","undefined","concat","_this$props$selectedC","name","card_type","text","level","type","family","src","alt","theDeck","id","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","setState","fetch","method","headers","Content-Type","then","response","status","console","log","json","results","data","catch","error","alert","state","src_Header","src_ListView","src_Card","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4f1270c2.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './App.css';\r\n\r\nclass Header extends Component {\r\n\trender(){\r\n\t\treturn (\r\n\t\t\t<div className=\"App-header\">\r\n\t\t\t\t<button  className=\"hamburger-button\" onClick={() => this.props.toggleListView()}><i className=\"fas fa-bars\"></i></button>    \r\n\t\t\t\t<h1 className=\"App-title\">Yu-Gi-Oh Deck Browser</h1>\r\n\t\t\t</div>\t\t\t\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\nimport './App.css';\r\n\r\nclass ListView extends Component {\r\n\r\n\trender(){\r\n\t\tlet displayListView = this.props.isListViewOpen ? \"block\" : \"none\";\r\n\r\n\t\treturn(\r\n\t\t\t<div className=\"list-container\" style={{ display: displayListView }}>\r\n\t\t\t\t<ul className=\"list\" >\r\n\t\t\t\t\t{this.props.cards.map( (card, index) => (\r\n\t\t\t\t\t\t<li key={index} onClick={() => this.props.fetchCardData(card.cardName)}> \r\n\t\t\t\t\t\t\t<p> {card.cardName} </p>     \t\t\t\t\r\n\t\t\t\t\t\t</li> \r\n\t\t\t\t\t))}\r\n\t\t\t\t</ul>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default ListView;","import React, { Component } from 'react';\r\nimport './App.css';\r\n\r\nclass Card extends Component {\r\n\r\n\trender(){\r\n\t\tlet imgUrl;\r\n\r\n\t\tif ((this.props.query === '' && this.props.selectedCard.length === 0) || (this.props.selectedCard === undefined))  {\r\n\t\t\treturn (\r\n\t\t\t\t<div className=\"card-container\">\r\n\t\t\t\t\t<div className=\"paragraph-container\">\r\n\t\t\t\t\t\t<p> Please select a card </p>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t)\r\n\r\n\t\t} else {\r\n\r\n\t\t\timgUrl = `http://52.57.88.137/api/card_image/${this.props.query}`\r\n\t\t\tconst { name, card_type, text, level, type, family } = this.props.selectedCard;\r\n\t\t\t\r\n\t\t\treturn(\r\n\t\t\t\t<div className=\"card-container\">\r\n\t\t\t\t\t<div className=\"card-header\">\r\n\t\t\t\t\t\t<h2> {name} </h2>\r\n\t\t\t\t\t\t<p> <span>{card_type}</span></p>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"card-box\">\r\n\t\t\t\t\t\t<div className=\"img-container\">\r\n\t\t\t\t\t\t\t<img src={imgUrl} alt={this.props.query}  className=\"card-img\"/>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className=\"card-info\">\r\n\t\t\t\t\t\t\t<h2> Description</h2>\r\n\t\t\t\t\t\t\t<p>{text}</p>\r\n\t\t\t\t\t\t\t<h2>Details</h2>\r\n\t\t\t\t\t\t\t<p> Level: <span>{level} </span></p>\r\n\t\t\t\t\t\t\t<p> Type: <span>{type} </span></p>\r\n\t\t\t\t\t\t\t<p> Family: <span>{family}</span></p>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t)\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default Card;","import React, { Component } from 'react';\nimport './App.css';\nimport Header from './Header.js';\nimport ListView from './ListView.js';\nimport Card from './Card.js';\n\nconst theDeck = [\n  {id:'0', cardName:'Burial from a Different Dimension'},\n  {id:'1', cardName:'Charge of the Light Brigade'},\n  {id:'2', cardName:'Infernoid Antra'},\n  {id:'3', cardName:'Infernoid Attondel'},\n  {id:'4', cardName:'Infernoid Decatron'},\n  {id:'5', cardName:'Infernoid Devyaty'},\n  {id:'6', cardName:'Infernoid Harmadik'},      \n  {id:'7', cardName:'Infernoid Onuncu'},\n  {id:'8', cardName:'Infernoid Patrulea'},\n  {id:'9', cardName:'Infernoid Pirmais'},\n  {id:'10', cardName:'Infernoid Seitsemas'},\n  {id:'11', cardName:'Lyla, Lightsworn Sorceress'},\n  {id:'12', cardName:'Monster Gate'},\n  {id:'13', cardName:'One for One'},\n  {id:'14', cardName:'Raiden, Hand of the Lightsworn'},\n  {id:'15', cardName:'Reasoning'},\n  {id:'16', cardName:'Time-Space Trap Hole'},\n  {id:'17', cardName:'Torrential Tribute'},\n  {id:'18', cardName:'Upstart Goblin'},\n  {id:'19', cardName:'Void Seer'}\n];\n\nclass App extends Component {\n  constructor(props){\n    super(props)\n\n    this.state = {\n      cards: theDeck,\n      selectedCard: [],\n      query:'',\n      isListViewOpen: true\n    }\n  }\n\n  fetchCardData = (name) => {\n\n    let apiUrl;\n\n    this.setState({query: name});\n\n    apiUrl = 'http://52.57.88.137/api/card_data/'+ name;\n\n    fetch(apiUrl, { \n      method: 'GET', \n      headers: {\n        \"Content-Type\": \"application/json\"\n      } \n    })\n    .then((response) => {\n\n      if (response.status === 404){\n        console.log ('No data')\n      } \n      return response.json();\n    })\n    .then((results) => {\n      \n      if (results.status === 'not found'){\n        this.setState({\n          selectedCard: [],\n        })  \n        return\n      }\n       \n      this.setState({\n        selectedCard: results.data\n      })  \n\n    })\n    .catch((error) => {\n        // Code for handling errors\n        console.log(error)\n        alert(\"Sorry. There was an error retrieving the data. Please refer to the console for more information\")\n    });\n  }\n\n  //handle hamburger icon\n  toggleListView = () => {\n    if (this.state.isListViewOpen) {\n      this.setState({isListViewOpen: false})\n    } else {\n      this.setState({isListViewOpen: true})\n    }   \n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header toggleListView={this.toggleListView} isListViewOpen={this.state.isListViewOpen}/>\n        <div className=\"container\">\n          <ListView \n            cards={this.state.cards}\n            selectedCard={this.state.selectedCard}\n            fetchCardData={this.fetchCardData}\n            isListViewOpen={this.state.isListViewOpen}\n          />\n          <Card\n            query={this.state.query}\n            selectedCard={this.state.selectedCard}         \n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}